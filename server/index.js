const express = require("express");
const app = express();
const port = 4000;
const cors = require("cors");
const configDotenv = require("dotenv/config.js");
const { createClient } = require("@supabase/supabase-js");
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');


app.use(express.json());
// the above statement will parse the incomimg requests
// the data is likely to be in json format
// it will parse the data id Content-Type is application/json

app.use(cors({
  origin: 'http://localhost:3000',
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true,
  optionsSuccessStatus: 204, // No Content for preflight requests
}));
app.use(bodyParser.json());

// cors stands for cross origin resource sharing
// it allow server to respond to request that are from different origin

// reactblogproject -- Password


const secretKey = process.env.JWT_SECRET;
// this is a secret key generated by code and stored in env file to create a JWT 


// app.use(function (req, res, next) {
//   res.setHeader("Access-Control-Allow-Origin", "*");
//   res.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
//   res.setHeader("Access-Control-Allow-Headers", "Content-Type");
//   res.setHeader("Access-Control-Allow-Credentials", true);
//   next();
// });

const supabase = createClient(process.env.SUPA_URL, process.env.SUPR_KEY);
// the above statement will create a supabase client

app.get("/", (req, res) => {
  res.send("Hello, World!");
});
// defining a http get requesr to the rool '/'

app.post("/signup", async (req, res) => {
  const { name, email, password } = req.body;
  console.log(name);

  const { data } = await supabase.from("users").select().eq("name", name);

  console.log("Data:", data);

  if (data.length !== 0) {
    console.log(" we are her ", data);
    // res.send('exists');
    res.status(409).send("User already exists");
  } else {
    console.log("Creating a new user");
    console.log("Name:", name, "Email:", email, "Password:", password);

    const { error } = await supabase.from("users").insert([
      { name: name, email: email, password: password }, // Adjust the structure here
    ]);

    if (error) {
      console.error(error);
      res.status(500).send("Internal Server Error");
      // res.send('fail');
    } else {
      // res.send('success');

      res.status(201).send("User created successfully");
    }
  }
});

app.post("/login", async (req, res) => {
  const { email, password } = req.body;

  // console.log(email, password);

  const { data } = await supabase.from("users").select().eq("email", email);
  // the above statement will retrieve all the information from the users table where email is equal to given  email

  console.log("data", data);

  let checkPass = data[0]["password"];
  // console.log(checkPass);

  if (checkPass === password) {
    // res.send("correct password");
    const token = jwt.sign({ email: data[0].email, userId: data[0].id }, secretKey, { expiresIn: '1h' });
    console.log("here is the token ",token);
    // jwt.sign will create a javascript token 
    // it take three paramter 
    // payload
    // secret key
    // expiration time  



    res.status(200).json({ token });
  } else {
    res.status(401).send("wrong username and password");
  }
});


// Endpoint to retrieve user details based on the token
app.get('/get-user-details', (req, res) => {
  console.log(req.body);
  const token = req.body.token;
  console.log("here is the token 2", token);
  // Verify the token
  jwt.verify(token, secretKey, (err, decoded) => {
    if (err) {
      return res.status(401).json({ message: 'Token is not valid' });
    }

    // Get the user ID from the decoded token
    const userId = decoded.userId;

    console.log(userId);

    res.send("good");
  });
});






app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
